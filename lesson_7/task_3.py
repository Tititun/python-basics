# Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий количеству
# ячеек клетки (целое число). В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение
# и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячее исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек
# двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение
# количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.


class CellException(Exception):
    pass


class Cell:
    def __init__(self, comps):  # comps - число ячеек, от слова compartments
        self.comps = comps

    def __add__(self, other):
        return Cell(self.comps + other.comps)

    def __sub__(self, other):
        if self.comps - other.comps <= 0:
            raise CellException('Первая клетка должна быть больше второй!')
        return Cell(self.comps - other.comps)

    def __mul__(self, other):
        return Cell(self.comps * other.comps)

    def __truediv__(self, other):
        total_cells = round(self.comps / other.comps)
        if total_cells == 0:
            raise CellException('Первая клетка слишком маленькая, чтобы делить на вторую!')
        return Cell(round(self.comps / other.comps))

    def __str__(self):
        return f'Клетка с количеством ячеек: {self.comps}'

    def make_order(self, comps_per_row):
        num_rows = self.comps // comps_per_row
        last_row = self.comps % comps_per_row
        return (('\n' + '*' * comps_per_row) * num_rows + '\n' + '*' * last_row).strip()


cell_1 = Cell(12)
cell_2 = Cell(20)

print(cell_1 + cell_2)
print(cell_2 - cell_1)
print(cell_1 * cell_2)
print(cell_1 / cell_2)
print(cell_1.make_order(3))
