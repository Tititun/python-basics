# Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не
# остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число)
# и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.

import re


class NumCheckerError(Exception):
    def __init__(self, text):
        print(f'Введенный вами элемент "{text}" не является числом, введите число.\n')

numbers = []
while True:
    try:
        number = input('Введите число для заполнения списка. Введите "stop" чтобы выйти.\n')
        if number == 'stop':
            print(numbers)
            break
        elif m := re.search(r'\D', number):
            raise NumCheckerError(number)
        numbers.append(int(number))
        print(numbers)
    except NumCheckerError as e:
        print(e)

# кажется что если написать:
# except NumCheckerError:
#     pass
# то эффект будет такой же. Не совсем ясно зачем писать именно так, как я сделал.

# Вариант без собственного класса:
# numbers = []
# while True:
#     try:
#         number = input('Введите число для заполнения списка. Введите "stop" чтобы выйти.\n')
#         numbers.append(int(number))
#         print(numbers)
#     except ValueError:
#         print('Вы ввели не число')
